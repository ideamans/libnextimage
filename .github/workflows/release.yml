name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  build-matrix:
    name: Build ${{ matrix.platform }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin-arm64
            arch: arm64
          - os: macos-13
            platform: darwin-amd64
            arch: amd64
          - os: ubuntu-latest
            platform: linux-amd64
            arch: amd64
          - os: windows-latest
            platform: windows-amd64
            arch: amd64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake jpeg libpng giflib nasm
      
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libjpeg-dev libpng-dev libgif-dev nasm

      - name: Setup MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-libjpeg-turbo
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-giflib
            mingw-w64-ucrt-x86_64-libwebp
            mingw-w64-ucrt-x86_64-nasm

      - name: Build C library (Unix)
        if: runner.os != 'Windows'
        run: |
          bash scripts/build-c-library.sh

      - name: Build C library (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          bash scripts/build-c-library.sh
      
      - name: Verify build (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -lh lib/${{ matrix.platform }}/libnextimage.a
          if [ "${{ runner.os }}" = "macOS" ]; then
            ls -lh lib/${{ matrix.platform }}/libnextimage.dylib
            # 動的ライブラリの依存関係を確認（自己完結しているか）
            otool -L lib/${{ matrix.platform }}/libnextimage.dylib
          else
            ls -lh lib/${{ matrix.platform }}/libnextimage.so
            # 動的ライブラリの依存関係を確認（自己完結しているか）
            ldd lib/${{ matrix.platform }}/libnextimage.so || true
          fi
          ls -lh include/

      - name: Verify build (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          ls -lh lib/${{ matrix.platform }}/libnextimage.a
          ls -lh lib/${{ matrix.platform }}/libnextimage.dll
          # 動的ライブラリの依存関係を確認（自己完結しているか）
          ldd lib/${{ matrix.platform }}/libnextimage.dll || true
          ls -lh include/
      
      - name: Package release (Unix)
        if: runner.os != 'Windows'
        run: |
          # Static library package
          mkdir -p release-static-${{ matrix.platform }}/lib/${{ matrix.platform }}
          mkdir -p release-static-${{ matrix.platform }}/include/nextimage
          cp lib/${{ matrix.platform }}/libnextimage.a release-static-${{ matrix.platform }}/lib/${{ matrix.platform }}/
          cp include/*.h release-static-${{ matrix.platform }}/include/
          cp include/nextimage/*.h release-static-${{ matrix.platform }}/include/nextimage/
          cd release-static-${{ matrix.platform }}
          tar czf ../libnextimage-${{ github.ref_name }}-${{ matrix.platform }}.tar.gz .
          cd ..

          # Shared library package
          mkdir -p release-shared-${{ matrix.platform }}/lib/${{ matrix.platform }}
          mkdir -p release-shared-${{ matrix.platform }}/include/nextimage
          if [ "${{ runner.os }}" = "macOS" ]; then
            cp lib/${{ matrix.platform }}/libnextimage.dylib release-shared-${{ matrix.platform }}/lib/${{ matrix.platform }}/
          else
            cp lib/${{ matrix.platform }}/libnextimage.so release-shared-${{ matrix.platform }}/lib/${{ matrix.platform }}/
          fi
          cp include/*.h release-shared-${{ matrix.platform }}/include/
          cp include/nextimage/*.h release-shared-${{ matrix.platform }}/include/nextimage/
          cd release-shared-${{ matrix.platform }}
          tar czf ../libnextimage-shared-${{ github.ref_name }}-${{ matrix.platform }}.tar.gz .
          cd ..

          ls -lh libnextimage-*.tar.gz

      - name: Package release (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          # Static library package
          mkdir -p release-static-${{ matrix.platform }}/lib/${{ matrix.platform }}
          mkdir -p release-static-${{ matrix.platform }}/include/nextimage
          cp lib/${{ matrix.platform }}/libnextimage.a release-static-${{ matrix.platform }}/lib/${{ matrix.platform }}/
          cp include/*.h release-static-${{ matrix.platform }}/include/
          cp include/nextimage/*.h release-static-${{ matrix.platform }}/include/nextimage/
          cd release-static-${{ matrix.platform }}
          tar czf ../libnextimage-${{ github.ref_name }}-${{ matrix.platform }}.tar.gz .
          cd ..

          # Shared library package
          mkdir -p release-shared-${{ matrix.platform }}/lib/${{ matrix.platform }}
          mkdir -p release-shared-${{ matrix.platform }}/include/nextimage
          cp lib/${{ matrix.platform }}/libnextimage.dll release-shared-${{ matrix.platform }}/lib/${{ matrix.platform }}/
          cp include/*.h release-shared-${{ matrix.platform }}/include/
          cp include/nextimage/*.h release-shared-${{ matrix.platform }}/include/nextimage/
          cd release-shared-${{ matrix.platform }}
          tar czf ../libnextimage-shared-${{ github.ref_name }}-${{ matrix.platform }}.tar.gz .
          cd ..

          ls -lh libnextimage-*.tar.gz
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libnextimage-${{ matrix.platform }}
          path: libnextimage-*.tar.gz
          retention-days: 7
  
  create-release:
    name: Create GitHub Release
    needs: build-matrix
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure
        run: |
          ls -R artifacts/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
