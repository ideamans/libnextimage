name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-c-library:
    name: Build C Library (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake jpeg libpng giflib imagemagick nasm

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libjpeg-dev libpng-dev libgif-dev imagemagick nasm

      - name: Setup MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-libjpeg-turbo
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-giflib
            mingw-w64-ucrt-x86_64-libwebp
            mingw-w64-ucrt-x86_64-nasm
            mingw-w64-ucrt-x86_64-imagemagick

      - name: Build C library (Unix)
        if: runner.os != 'Windows'
        run: |
          bash scripts/build-c-library.sh

      - name: Build C library (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          bash scripts/build-c-library.sh

      - name: Build C tests (Unix)
        if: runner.os != 'Windows'
        working-directory: c/build
        run: |
          NCPUS=$(sysctl -n hw.ncpu 2>/dev/null || nproc 2>/dev/null || echo 4)
          cmake --build . --parallel $NCPUS

      - name: Build C tests (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        working-directory: c/build
        run: |
          NCPUS=$(nproc 2>/dev/null || echo 4)
          cmake --build . --parallel $NCPUS

      - name: Run C tests (Unix)
        if: runner.os != 'Windows'
        working-directory: c/build
        run: |
          ctest --output-on-failure --verbose

      - name: Run C tests (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        working-directory: c/build
        run: |
          ctest --output-on-failure --verbose

      - name: Generate test images (Unix)
        if: runner.os != 'Windows'
        run: |
          bash scripts/generate-test-images.sh

      - name: Generate test images (Windows - MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          bash scripts/generate-test-images.sh

      - name: Cache C library artifacts
        uses: actions/cache/save@v3
        with:
          path: |
            lib/
            c/build/
            testdata/
          key: c-library-${{ runner.os }}-${{ github.sha }}

      - name: Dump build logs (on failure - Unix)
        if: failure() && runner.os != 'Windows'
        run: |
          echo "=== CMake Configuration Log ==="
          if [ -f "c/build/CMakeFiles/CMakeOutput.log" ]; then
            cat c/build/CMakeFiles/CMakeOutput.log
          else
            echo "CMakeOutput.log not found"
          fi
          echo ""
          echo "=== CMake Error Log ==="
          if [ -f "c/build/CMakeFiles/CMakeError.log" ]; then
            cat c/build/CMakeFiles/CMakeError.log
          else
            echo "CMakeError.log not found"
          fi
          echo ""
          echo "=== Build Directory Contents ==="
          ls -la c/build/ || echo "Build directory not found"
          echo ""
          echo "=== Library Installation Directory ==="
          ls -la lib/*/ || echo "Library directory not found"

      - name: Dump build logs (on failure - Windows)
        if: failure() && runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "=== CMake Configuration Log ==="
          if [ -f "c/build/CMakeFiles/CMakeOutput.log" ]; then
            cat c/build/CMakeFiles/CMakeOutput.log
          else
            echo "CMakeOutput.log not found"
          fi
          echo ""
          echo "=== CMake Error Log ==="
          if [ -f "c/build/CMakeFiles/CMakeError.log" ]; then
            cat c/build/CMakeFiles/CMakeError.log
          else
            echo "CMakeError.log not found"
          fi
          echo ""
          echo "=== Build Directory Contents ==="
          ls -la c/build/ || echo "Build directory not found"
          echo ""
          echo "=== Library Installation Directory ==="
          ls -la lib/*/ || echo "Library directory not found"

  test-go:
    name: Go Tests (${{ matrix.os }})
    needs: build-c-library
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Restore C library cache
        uses: actions/cache/restore@v3
        with:
          path: |
            lib/
            c/build/
            testdata/
          key: c-library-${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-libjpeg-turbo
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-giflib
            mingw-w64-ucrt-x86_64-libwebp

      - name: Run Go tests (Unix)
        if: runner.os != 'Windows'
        working-directory: golang
        run: |
          go test -v -race -coverprofile=coverage.out .

      - name: Run Go tests (Windows)
        if: runner.os == 'Windows'
        working-directory: golang
        shell: pwsh
        run: |
          # MSYS2 UCRTのツールチェーンとライブラリパスを設定（Windowsパス形式）
          $env:CC = "D:\a\_temp\msys64\ucrt64\bin\gcc.exe"
          $env:CXX = "D:\a\_temp\msys64\ucrt64\bin\g++.exe"
          $env:CGO_ENABLED = "1"
          $env:CGO_CFLAGS = "-ID:\a\_temp\msys64\ucrt64\include"
          $env:CGO_LDFLAGS = "-LD:\a\_temp\msys64\ucrt64\lib"
          $env:PATH = "D:\a\_temp\msys64\ucrt64\bin;$env:PATH"

          # 環境確認（デバッグ用）
          Write-Host "=== Environment Check ==="
          Write-Host "CC: $env:CC"
          Write-Host "CGO_CFLAGS: $env:CGO_CFLAGS"
          Write-Host "CGO_LDFLAGS: $env:CGO_LDFLAGS"
          & $env:CC --version
          if (Test-Path "D:\a\_temp\msys64\ucrt64\lib\libjpeg.a") { Write-Host "libjpeg found" }
          if (Test-Path "D:\a\_temp\msys64\ucrt64\lib\libpng.a") { Write-Host "libpng found" }
          if (Test-Path "D:\a\_temp\msys64\ucrt64\lib\libgif.a") { Write-Host "libgif found" }
          Write-Host "========================"

          # Windowsではrace detectorとcoverageを無効化（シンプルなテスト実行）
          go test -v .

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          files: golang/coverage.out
          flags: unittests
          name: codecov-umbrella

  test-typescript:
    name: TypeScript Tests (${{ matrix.os }})
    needs: build-c-library
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['22']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Restore C library cache
        uses: actions/cache/restore@v3
        with:
          path: |
            lib/
            c/build/
            testdata/
          key: c-library-${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Install runtime dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgif7 libjpeg-turbo8 libpng16-16

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install TypeScript dependencies
        working-directory: typescript
        run: |
          npm install

      - name: Build TypeScript project
        working-directory: typescript
        run: |
          npm run build

      - name: Run TypeScript tests
        working-directory: typescript
        run: |
          npm test
